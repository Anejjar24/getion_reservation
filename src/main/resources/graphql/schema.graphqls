type Client {
    id: ID
    nom: String
    prenom: String
    email: String
    telephone: String
}

type Chambre {
    id: ID
    prix: Float
    disponible: Boolean
    type: TypeChambre
}

enum TypeChambre {
    SINGLE
    TWIN
    DOUBLE
    FAMILY
    DELUXE
}

type Reservation {
    id: ID
    client: Client
    chambre: Chambre
    dateDebut: String
    dateFin: String
    preferences: String
}

input ClientInput {
    nom: String!
    prenom: String!
    email: String!
    telephone: String!
}

input ChambreInput {
    prix: Float!
    disponible: Boolean!
    type: TypeChambre!
}

input ReservationInput {
    clientId: ID!
    chambreId: ID!
    dateDebut: String!
    dateFin: String!
    preferences: String
}

type Query {
    getAllReservations: [Reservation]
    getReservationById(id: ID!): Reservation
    getAllChambres: [Chambre]
    getAllClients: [Client]
}

type Mutation {
    createClient(input: ClientInput!): Client
    createChambre(input: ChambreInput!): Chambre
     createReservation(input: ReservationInput!): Reservation
    updateReservation(id: ID!, input: ReservationInput!): Reservation
    deleteReservation(id: ID!): Boolean
}